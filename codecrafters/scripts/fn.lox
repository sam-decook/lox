fun makeFilter(min) {
  fun filter(n) {
    if (n < min) {
      return false;
    }
    return true;
  }
  return filter;
}

// This function applies a function to a list of numbers
fun applyToNumbers(f, count) {
  var n = 0;
  while (n < count) {
    if (f(n)) {
      print n;
    }
    n = n + 1;
  }
}

var greaterThanX = makeFilter(55);
var greaterThanY = makeFilter(10);

print "Numbers >= 55:";
applyToNumbers(greaterThanX, 55 + 5);

print "Numbers >= 10:";
applyToNumbers(greaterThanY, 10 + 5);

fun square(x) {
  return x * x;
}

fun applyTimesN(N, f, x) {
  var i = 0;
  while (i < N) {
    x = f(x);
    i = i + 1;
  }
  return x;
}

print applyTimesN(3, square, 6);

// This program uses mutual recursion to determine if a number is even or odd.
// It also uses a shared threshold variable that is used to determine if a number is too large to be processed.
{
  var threshold = 50;

  fun isEven(n) {
    if (n == 0) return true;
    if (n > threshold) return false;
    return isOdd(n - 1);
  }

  fun isOdd(n) {
    if (n == 0) return false;
    if (n > threshold) return false;
    return isEven(n - 1);
  }

  print isEven(75);
}
